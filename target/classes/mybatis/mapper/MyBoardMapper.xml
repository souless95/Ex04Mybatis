<?xml version="1.0" encoding="UTF-8"?>

<!-- 해당 XML파일이 Mapper역할이라는 것을 명시하기 위해 필요한 Doctype으로,
Mapper파일 생성시 복사해서 사용하면 된다. -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
Mapper파일의 최상위 엘리먼트는 <mapper> 이다.
namespace 속성 : 해당 매퍼파일을 호출하기 위해 정의한 인터페이스의 패키지를 포함한 풀 경로를 기술해준다.
	해당 인터페이스는 컨트롤러와 Mapper(DAO) 사이를 연결해주는 서비스객체의 역할을 한다.
-->
  <mapper namespace="mybatis.ServiceMyBoard">
  	<!-- 
  	속성설명
  		id : 실제 호출되는 메서듬여과 동일한 이름으로 기술한다.
  			컨트롤러에서 해당 Mapper를 호출하기 위해 인터페이스에
  			정의된 추상메서드를 호출한다.
  		resultType: 쿼리 실행 후 반환되는 값의 타입을 명시한다.
  			만약 반환타입이 객체인 경우라면 패키지명을 포함한 전체 경로를 기술해야한다.
  		parameterType: 파라미터를 DTO(혹은 VO)에 저장한 후
  			매퍼로 전달할 수 있는데 이때 해당 속성을 통해 클래스명을 명시할 수 있다.
  			DTO에 저장된 값은 멤버변수명으로 접근할 수 있다.
  			즉 getter()를 통해 접근한다.
  	-->
  	
  	<!-- 
  	방명록 게시판의 게시물 갯수를 카운트하여 정수로 반환해준다.
  	-->
  	<select id="getTotalCount" resultType="int">
		SELECT COUNT(*) FROM myboard
  	</select>
  	<!-- 
  	목록에 출력할 게시물을 select한 후 결과는 ArrayList<MyBoardDTO> 타입으로 반환된다.
  	Mybatis는 레코드 인출을 위해 <select> 엘리먼트로 실행할 경우 반환값은 List컬렉션으로 생성해준다.
  	-->
  	<!-- 인터페이스에 정의된 listPage(int s, int e) 메서드 호출시 전달된 파라미터 s, e는 아래와 같이
  	param1, param2로 전달되어 쿼리문이 실행된다. 즉 인파라미터 설정시 별도의 setter없이 즉시 사용할 수 있다. -->
  	<select id="listPage" resultType="mybatis.MyBoardDTO">
  		SELECT * FROM (
  			SELECT Tb.*, rownum rNum FROM (
  				SELECT * FROM myboard ORDER BY idx DESC)
  			Tb
  		)
  		WHERE rNum BETWEEN #{param1} AND #{param2}
  	</select>
  	
  	<!-- 
  	@Param 어노테이션에서 지정한 별칭을 사용해서 인파라미터를 처리한다.
  	일련번호는 기존의 쿼리와 동일하게 시퀀스를 통해 입력한다.
  	<insert> 엘리먼트는 반환타입을 별도로 명시하지 않아도 실행된 경과로
  	정수를 반환한다. 
  	 -->
  	<insert id="write">
  		INSERT INTO myboard (idx, id, name, contents)
  		VALUES
  		(myboard_seq.nextval, #{_id},#{_name},#{_contents})
  	</insert>
  	
  	<!-- 
  	parameterType에 명시한 DTO에 저장된 값을 getter()로 접근하여 쿼리문에 삽입한다.
  	즉 DTO의 멤버변수명만 명시하면 된다. MyBoardDTO에 담아서 반환한다.
  	-->
  	<select id="view" resultType="mybatis.MyBoardDTO"
  			parameterType="mybatis.ParameterDTO">
  			SELECT * FROM myboard WHERE idx=#{board_idx} AND id=#{user_id}
  	</select>
  	
  	<!-- 수정처리하기. 전송된 폼값은 커맨드객체를 통해 한번에 전달되므로
  	parameterType을 해당 DTO로 설정한 후 멤버변수명으로 값을 읽어와서
  	쿼리문에 설정한다. -->
  	<update id="modify" parameterType="mybatis.MyBoardDTO">
  		UPDATE myboard SET name=#{name}, contents=#{contents}
  			WHERE idx=#{idx} AND id=#{id}
  	</update>
  </mapper>